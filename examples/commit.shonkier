parse(cs, p) -> prefer(supply(cs, p()))
parses(cs, p) -> collect(supply(cs, p()))

supply(,'getChar):
supply("`[c|cs]`", {'getChar()   -> k}) -> supply(cs,k(c))
supply(""        , {'getChar()   -> k}) -> k('abort())
supply("", v) -> v

prefer('choice):
prefer({'choice(a, b) -> k}) -> prefer(k(a())) ?> prefer(k(b()))
prefer(v) -> v

append([],     ys) -> ys
append([x|xs], ys) -> [x|append(xs,ys)]

collect('choice,'abort):
collect({'choice(a, b) -> k}) -> append(collect(k(a())), collect(k(b())))
collect({'abort() -> k}) -> []
collect(v) -> [v]

commit(p) -> 'abort ^ p()

some(p) -> [p()|many(p)]
many(p) -> 'choice({[p() | commit({many(p)})]},{[]})

digit("0") -> 0
digit("1") -> 1
digit("2") -> 2
digit("3") -> 3
digit("4") -> 4
digit("5") -> 5
digit("6") -> 6
digit("7") -> 7
digit("8") -> 8
digit("9") -> 9

map(f,[])     -> []
map(f,[x|xs]) -> [f(x)|map(f,xs)]

unpack("")         -> []
unpack("`[c|cs]`") -> [c|unpack(cs)]

eat(s) -> map({_ == 'getChar(); []}, unpack(s))

number() -> convert(reverse(some({digit('getChar())})))

grow(v, m) -> 'choice({grow(m(v),m)}, {v})

parens(p) -> eat("("); x := p(); eat(")"); x

wee() -> 'choice(number, {parens(addition)})

addition() -> grow(wee(), {x -> eat("+"); commit({['Plus x wee()]})})

reverse(xs) -> reverseAcc([],xs)
reverseAcc(acc,[])     -> acc
reverseAcc(acc,[x|xs]) -> reverseAcc([x|acc],xs)

convert([])     -> 0
convert([d|ds]) -> d + 10 * convert(ds)

tree() -> 'choice({eat("N"); commit({[tree() tree()]})}, {eat("L"); []})

main() -> [
  parse("42+37+5", addition)
  parse("42+(37+5)", addition)
  parse("NNLLNLL", tree)
  parse("NNLLNLX", tree) ?> 'phew
  parse("", {'choice('abort, {1}) ?> 2})
  parses("", {'choice('abort, {1}) ?> 2})
  ]
